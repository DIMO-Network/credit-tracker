// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.3
// source: pkg/grpc/credit-tracker.proto

package grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	CreditTracker_CheckCredits_FullMethodName  = "/grpc.CreditTracker/CheckCredits"
	CreditTracker_DeductCredits_FullMethodName = "/grpc.CreditTracker/DeductCredits"
	CreditTracker_RefundCredits_FullMethodName = "/grpc.CreditTracker/RefundCredits"
)

// CreditTrackerClient is the client API for CreditTracker service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Credit tracking service definition
type CreditTrackerClient interface {
	// CheckCredits verifies the available credits for a given license and token
	CheckCredits(ctx context.Context, in *CreditCheckRequest, opts ...grpc.CallOption) (*CreditCheckResponse, error)
	// DeductCredits attempts to deduct credits from a given license and token
	DeductCredits(ctx context.Context, in *CreditDeductRequest, opts ...grpc.CallOption) (*CreditDeductResponse, error)
	// RefundCredits refunds credits to a given license and token
	RefundCredits(ctx context.Context, in *RefundCreditsRequest, opts ...grpc.CallOption) (*RefundCreditsResponse, error)
}

type creditTrackerClient struct {
	cc grpc.ClientConnInterface
}

func NewCreditTrackerClient(cc grpc.ClientConnInterface) CreditTrackerClient {
	return &creditTrackerClient{cc}
}

func (c *creditTrackerClient) CheckCredits(ctx context.Context, in *CreditCheckRequest, opts ...grpc.CallOption) (*CreditCheckResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreditCheckResponse)
	err := c.cc.Invoke(ctx, CreditTracker_CheckCredits_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *creditTrackerClient) DeductCredits(ctx context.Context, in *CreditDeductRequest, opts ...grpc.CallOption) (*CreditDeductResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreditDeductResponse)
	err := c.cc.Invoke(ctx, CreditTracker_DeductCredits_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *creditTrackerClient) RefundCredits(ctx context.Context, in *RefundCreditsRequest, opts ...grpc.CallOption) (*RefundCreditsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RefundCreditsResponse)
	err := c.cc.Invoke(ctx, CreditTracker_RefundCredits_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CreditTrackerServer is the server API for CreditTracker service.
// All implementations must embed UnimplementedCreditTrackerServer
// for forward compatibility.
//
// Credit tracking service definition
type CreditTrackerServer interface {
	// CheckCredits verifies the available credits for a given license and token
	CheckCredits(context.Context, *CreditCheckRequest) (*CreditCheckResponse, error)
	// DeductCredits attempts to deduct credits from a given license and token
	DeductCredits(context.Context, *CreditDeductRequest) (*CreditDeductResponse, error)
	// RefundCredits refunds credits to a given license and token
	RefundCredits(context.Context, *RefundCreditsRequest) (*RefundCreditsResponse, error)
	mustEmbedUnimplementedCreditTrackerServer()
}

// UnimplementedCreditTrackerServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedCreditTrackerServer struct{}

func (UnimplementedCreditTrackerServer) CheckCredits(context.Context, *CreditCheckRequest) (*CreditCheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckCredits not implemented")
}
func (UnimplementedCreditTrackerServer) DeductCredits(context.Context, *CreditDeductRequest) (*CreditDeductResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeductCredits not implemented")
}
func (UnimplementedCreditTrackerServer) RefundCredits(context.Context, *RefundCreditsRequest) (*RefundCreditsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RefundCredits not implemented")
}
func (UnimplementedCreditTrackerServer) mustEmbedUnimplementedCreditTrackerServer() {}
func (UnimplementedCreditTrackerServer) testEmbeddedByValue()                       {}

// UnsafeCreditTrackerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CreditTrackerServer will
// result in compilation errors.
type UnsafeCreditTrackerServer interface {
	mustEmbedUnimplementedCreditTrackerServer()
}

func RegisterCreditTrackerServer(s grpc.ServiceRegistrar, srv CreditTrackerServer) {
	// If the following call pancis, it indicates UnimplementedCreditTrackerServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&CreditTracker_ServiceDesc, srv)
}

func _CreditTracker_CheckCredits_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreditCheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CreditTrackerServer).CheckCredits(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CreditTracker_CheckCredits_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CreditTrackerServer).CheckCredits(ctx, req.(*CreditCheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CreditTracker_DeductCredits_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreditDeductRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CreditTrackerServer).DeductCredits(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CreditTracker_DeductCredits_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CreditTrackerServer).DeductCredits(ctx, req.(*CreditDeductRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CreditTracker_RefundCredits_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RefundCreditsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CreditTrackerServer).RefundCredits(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CreditTracker_RefundCredits_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CreditTrackerServer).RefundCredits(ctx, req.(*RefundCreditsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CreditTracker_ServiceDesc is the grpc.ServiceDesc for CreditTracker service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CreditTracker_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grpc.CreditTracker",
	HandlerType: (*CreditTrackerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CheckCredits",
			Handler:    _CreditTracker_CheckCredits_Handler,
		},
		{
			MethodName: "DeductCredits",
			Handler:    _CreditTracker_DeductCredits_Handler,
		},
		{
			MethodName: "RefundCredits",
			Handler:    _CreditTracker_RefundCredits_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/grpc/credit-tracker.proto",
}
