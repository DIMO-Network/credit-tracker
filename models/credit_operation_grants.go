// Code generated by SQLBoiler 4.19.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// CreditOperationGrant is an object representing the database table.
type CreditOperationGrant struct {
	// Unique detail record identifier
	ID string `boil:"id" json:"id" toml:"id" yaml:"id"`
	// Links to the main operation record
	AppName string `boil:"app_name" json:"app_name" toml:"app_name" yaml:"app_name"`
	// Links to the main operation record
	ReferenceID string `boil:"reference_id" json:"reference_id" toml:"reference_id" yaml:"reference_id"`
	// Links to the main operation record
	OperationType string `boil:"operation_type" json:"operation_type" toml:"operation_type" yaml:"operation_type"`
	// Links to the credit grant
	GrantID string `boil:"grant_id" json:"grant_id" toml:"grant_id" yaml:"grant_id"`
	// How many credits were taken from this specific grant
	AmountUsed int64 `boil:"amount_used" json:"amount_used" toml:"amount_used" yaml:"amount_used"`
	// When this grant usage was recorded
	CreatedAt null.Time `boil:"created_at" json:"created_at,omitempty" toml:"created_at" yaml:"created_at,omitempty"`

	R *creditOperationGrantR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L creditOperationGrantL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var CreditOperationGrantColumns = struct {
	ID            string
	AppName       string
	ReferenceID   string
	OperationType string
	GrantID       string
	AmountUsed    string
	CreatedAt     string
}{
	ID:            "id",
	AppName:       "app_name",
	ReferenceID:   "reference_id",
	OperationType: "operation_type",
	GrantID:       "grant_id",
	AmountUsed:    "amount_used",
	CreatedAt:     "created_at",
}

var CreditOperationGrantTableColumns = struct {
	ID            string
	AppName       string
	ReferenceID   string
	OperationType string
	GrantID       string
	AmountUsed    string
	CreatedAt     string
}{
	ID:            "credit_operation_grants.id",
	AppName:       "credit_operation_grants.app_name",
	ReferenceID:   "credit_operation_grants.reference_id",
	OperationType: "credit_operation_grants.operation_type",
	GrantID:       "credit_operation_grants.grant_id",
	AmountUsed:    "credit_operation_grants.amount_used",
	CreatedAt:     "credit_operation_grants.created_at",
}

// Generated where

var CreditOperationGrantWhere = struct {
	ID            whereHelperstring
	AppName       whereHelperstring
	ReferenceID   whereHelperstring
	OperationType whereHelperstring
	GrantID       whereHelperstring
	AmountUsed    whereHelperint64
	CreatedAt     whereHelpernull_Time
}{
	ID:            whereHelperstring{field: "\"credit_tracker\".\"credit_operation_grants\".\"id\""},
	AppName:       whereHelperstring{field: "\"credit_tracker\".\"credit_operation_grants\".\"app_name\""},
	ReferenceID:   whereHelperstring{field: "\"credit_tracker\".\"credit_operation_grants\".\"reference_id\""},
	OperationType: whereHelperstring{field: "\"credit_tracker\".\"credit_operation_grants\".\"operation_type\""},
	GrantID:       whereHelperstring{field: "\"credit_tracker\".\"credit_operation_grants\".\"grant_id\""},
	AmountUsed:    whereHelperint64{field: "\"credit_tracker\".\"credit_operation_grants\".\"amount_used\""},
	CreatedAt:     whereHelpernull_Time{field: "\"credit_tracker\".\"credit_operation_grants\".\"created_at\""},
}

// CreditOperationGrantRels is where relationship names are stored.
var CreditOperationGrantRels = struct {
	Grant string
}{
	Grant: "Grant",
}

// creditOperationGrantR is where relationships are stored.
type creditOperationGrantR struct {
	Grant *CreditGrant `boil:"Grant" json:"Grant" toml:"Grant" yaml:"Grant"`
}

// NewStruct creates a new relationship struct
func (*creditOperationGrantR) NewStruct() *creditOperationGrantR {
	return &creditOperationGrantR{}
}

func (o *CreditOperationGrant) GetGrant() *CreditGrant {
	if o == nil {
		return nil
	}

	return o.R.GetGrant()
}

func (r *creditOperationGrantR) GetGrant() *CreditGrant {
	if r == nil {
		return nil
	}

	return r.Grant
}

// creditOperationGrantL is where Load methods for each relationship are stored.
type creditOperationGrantL struct{}

var (
	creditOperationGrantAllColumns            = []string{"id", "app_name", "reference_id", "operation_type", "grant_id", "amount_used", "created_at"}
	creditOperationGrantColumnsWithoutDefault = []string{"app_name", "reference_id", "operation_type", "grant_id", "amount_used"}
	creditOperationGrantColumnsWithDefault    = []string{"id", "created_at"}
	creditOperationGrantPrimaryKeyColumns     = []string{"id"}
	creditOperationGrantGeneratedColumns      = []string{}
)

type (
	// CreditOperationGrantSlice is an alias for a slice of pointers to CreditOperationGrant.
	// This should almost always be used instead of []CreditOperationGrant.
	CreditOperationGrantSlice []*CreditOperationGrant
	// CreditOperationGrantHook is the signature for custom CreditOperationGrant hook methods
	CreditOperationGrantHook func(context.Context, boil.ContextExecutor, *CreditOperationGrant) error

	creditOperationGrantQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	creditOperationGrantType                 = reflect.TypeOf(&CreditOperationGrant{})
	creditOperationGrantMapping              = queries.MakeStructMapping(creditOperationGrantType)
	creditOperationGrantPrimaryKeyMapping, _ = queries.BindMapping(creditOperationGrantType, creditOperationGrantMapping, creditOperationGrantPrimaryKeyColumns)
	creditOperationGrantInsertCacheMut       sync.RWMutex
	creditOperationGrantInsertCache          = make(map[string]insertCache)
	creditOperationGrantUpdateCacheMut       sync.RWMutex
	creditOperationGrantUpdateCache          = make(map[string]updateCache)
	creditOperationGrantUpsertCacheMut       sync.RWMutex
	creditOperationGrantUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var creditOperationGrantAfterSelectMu sync.Mutex
var creditOperationGrantAfterSelectHooks []CreditOperationGrantHook

var creditOperationGrantBeforeInsertMu sync.Mutex
var creditOperationGrantBeforeInsertHooks []CreditOperationGrantHook
var creditOperationGrantAfterInsertMu sync.Mutex
var creditOperationGrantAfterInsertHooks []CreditOperationGrantHook

var creditOperationGrantBeforeUpdateMu sync.Mutex
var creditOperationGrantBeforeUpdateHooks []CreditOperationGrantHook
var creditOperationGrantAfterUpdateMu sync.Mutex
var creditOperationGrantAfterUpdateHooks []CreditOperationGrantHook

var creditOperationGrantBeforeDeleteMu sync.Mutex
var creditOperationGrantBeforeDeleteHooks []CreditOperationGrantHook
var creditOperationGrantAfterDeleteMu sync.Mutex
var creditOperationGrantAfterDeleteHooks []CreditOperationGrantHook

var creditOperationGrantBeforeUpsertMu sync.Mutex
var creditOperationGrantBeforeUpsertHooks []CreditOperationGrantHook
var creditOperationGrantAfterUpsertMu sync.Mutex
var creditOperationGrantAfterUpsertHooks []CreditOperationGrantHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *CreditOperationGrant) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range creditOperationGrantAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *CreditOperationGrant) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range creditOperationGrantBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *CreditOperationGrant) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range creditOperationGrantAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *CreditOperationGrant) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range creditOperationGrantBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *CreditOperationGrant) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range creditOperationGrantAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *CreditOperationGrant) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range creditOperationGrantBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *CreditOperationGrant) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range creditOperationGrantAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *CreditOperationGrant) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range creditOperationGrantBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *CreditOperationGrant) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range creditOperationGrantAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddCreditOperationGrantHook registers your hook function for all future operations.
func AddCreditOperationGrantHook(hookPoint boil.HookPoint, creditOperationGrantHook CreditOperationGrantHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		creditOperationGrantAfterSelectMu.Lock()
		creditOperationGrantAfterSelectHooks = append(creditOperationGrantAfterSelectHooks, creditOperationGrantHook)
		creditOperationGrantAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		creditOperationGrantBeforeInsertMu.Lock()
		creditOperationGrantBeforeInsertHooks = append(creditOperationGrantBeforeInsertHooks, creditOperationGrantHook)
		creditOperationGrantBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		creditOperationGrantAfterInsertMu.Lock()
		creditOperationGrantAfterInsertHooks = append(creditOperationGrantAfterInsertHooks, creditOperationGrantHook)
		creditOperationGrantAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		creditOperationGrantBeforeUpdateMu.Lock()
		creditOperationGrantBeforeUpdateHooks = append(creditOperationGrantBeforeUpdateHooks, creditOperationGrantHook)
		creditOperationGrantBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		creditOperationGrantAfterUpdateMu.Lock()
		creditOperationGrantAfterUpdateHooks = append(creditOperationGrantAfterUpdateHooks, creditOperationGrantHook)
		creditOperationGrantAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		creditOperationGrantBeforeDeleteMu.Lock()
		creditOperationGrantBeforeDeleteHooks = append(creditOperationGrantBeforeDeleteHooks, creditOperationGrantHook)
		creditOperationGrantBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		creditOperationGrantAfterDeleteMu.Lock()
		creditOperationGrantAfterDeleteHooks = append(creditOperationGrantAfterDeleteHooks, creditOperationGrantHook)
		creditOperationGrantAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		creditOperationGrantBeforeUpsertMu.Lock()
		creditOperationGrantBeforeUpsertHooks = append(creditOperationGrantBeforeUpsertHooks, creditOperationGrantHook)
		creditOperationGrantBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		creditOperationGrantAfterUpsertMu.Lock()
		creditOperationGrantAfterUpsertHooks = append(creditOperationGrantAfterUpsertHooks, creditOperationGrantHook)
		creditOperationGrantAfterUpsertMu.Unlock()
	}
}

// One returns a single creditOperationGrant record from the query.
func (q creditOperationGrantQuery) One(ctx context.Context, exec boil.ContextExecutor) (*CreditOperationGrant, error) {
	o := &CreditOperationGrant{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for credit_operation_grants")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all CreditOperationGrant records from the query.
func (q creditOperationGrantQuery) All(ctx context.Context, exec boil.ContextExecutor) (CreditOperationGrantSlice, error) {
	var o []*CreditOperationGrant

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to CreditOperationGrant slice")
	}

	if len(creditOperationGrantAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all CreditOperationGrant records in the query.
func (q creditOperationGrantQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count credit_operation_grants rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q creditOperationGrantQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if credit_operation_grants exists")
	}

	return count > 0, nil
}

// Grant pointed to by the foreign key.
func (o *CreditOperationGrant) Grant(mods ...qm.QueryMod) creditGrantQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.GrantID),
	}

	queryMods = append(queryMods, mods...)

	return CreditGrants(queryMods...)
}

// LoadGrant allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (creditOperationGrantL) LoadGrant(ctx context.Context, e boil.ContextExecutor, singular bool, maybeCreditOperationGrant interface{}, mods queries.Applicator) error {
	var slice []*CreditOperationGrant
	var object *CreditOperationGrant

	if singular {
		var ok bool
		object, ok = maybeCreditOperationGrant.(*CreditOperationGrant)
		if !ok {
			object = new(CreditOperationGrant)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeCreditOperationGrant)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeCreditOperationGrant))
			}
		}
	} else {
		s, ok := maybeCreditOperationGrant.(*[]*CreditOperationGrant)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeCreditOperationGrant)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeCreditOperationGrant))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &creditOperationGrantR{}
		}
		args[object.GrantID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &creditOperationGrantR{}
			}

			args[obj.GrantID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`credit_tracker.credit_grants`),
		qm.WhereIn(`credit_tracker.credit_grants.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load CreditGrant")
	}

	var resultSlice []*CreditGrant
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice CreditGrant")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for credit_grants")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for credit_grants")
	}

	if len(creditGrantAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Grant = foreign
		if foreign.R == nil {
			foreign.R = &creditGrantR{}
		}
		foreign.R.GrantCreditOperationGrants = append(foreign.R.GrantCreditOperationGrants, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.GrantID == foreign.ID {
				local.R.Grant = foreign
				if foreign.R == nil {
					foreign.R = &creditGrantR{}
				}
				foreign.R.GrantCreditOperationGrants = append(foreign.R.GrantCreditOperationGrants, local)
				break
			}
		}
	}

	return nil
}

// SetGrant of the creditOperationGrant to the related item.
// Sets o.R.Grant to related.
// Adds o to related.R.GrantCreditOperationGrants.
func (o *CreditOperationGrant) SetGrant(ctx context.Context, exec boil.ContextExecutor, insert bool, related *CreditGrant) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"credit_tracker\".\"credit_operation_grants\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"grant_id"}),
		strmangle.WhereClause("\"", "\"", 2, creditOperationGrantPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.GrantID = related.ID
	if o.R == nil {
		o.R = &creditOperationGrantR{
			Grant: related,
		}
	} else {
		o.R.Grant = related
	}

	if related.R == nil {
		related.R = &creditGrantR{
			GrantCreditOperationGrants: CreditOperationGrantSlice{o},
		}
	} else {
		related.R.GrantCreditOperationGrants = append(related.R.GrantCreditOperationGrants, o)
	}

	return nil
}

// CreditOperationGrants retrieves all the records using an executor.
func CreditOperationGrants(mods ...qm.QueryMod) creditOperationGrantQuery {
	mods = append(mods, qm.From("\"credit_tracker\".\"credit_operation_grants\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"credit_tracker\".\"credit_operation_grants\".*"})
	}

	return creditOperationGrantQuery{q}
}

// FindCreditOperationGrant retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindCreditOperationGrant(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*CreditOperationGrant, error) {
	creditOperationGrantObj := &CreditOperationGrant{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"credit_tracker\".\"credit_operation_grants\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, creditOperationGrantObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from credit_operation_grants")
	}

	if err = creditOperationGrantObj.doAfterSelectHooks(ctx, exec); err != nil {
		return creditOperationGrantObj, err
	}

	return creditOperationGrantObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *CreditOperationGrant) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no credit_operation_grants provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(creditOperationGrantColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	creditOperationGrantInsertCacheMut.RLock()
	cache, cached := creditOperationGrantInsertCache[key]
	creditOperationGrantInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			creditOperationGrantAllColumns,
			creditOperationGrantColumnsWithDefault,
			creditOperationGrantColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(creditOperationGrantType, creditOperationGrantMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(creditOperationGrantType, creditOperationGrantMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"credit_tracker\".\"credit_operation_grants\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"credit_tracker\".\"credit_operation_grants\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into credit_operation_grants")
	}

	if !cached {
		creditOperationGrantInsertCacheMut.Lock()
		creditOperationGrantInsertCache[key] = cache
		creditOperationGrantInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the CreditOperationGrant.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *CreditOperationGrant) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	creditOperationGrantUpdateCacheMut.RLock()
	cache, cached := creditOperationGrantUpdateCache[key]
	creditOperationGrantUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			creditOperationGrantAllColumns,
			creditOperationGrantPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update credit_operation_grants, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"credit_tracker\".\"credit_operation_grants\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, creditOperationGrantPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(creditOperationGrantType, creditOperationGrantMapping, append(wl, creditOperationGrantPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update credit_operation_grants row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for credit_operation_grants")
	}

	if !cached {
		creditOperationGrantUpdateCacheMut.Lock()
		creditOperationGrantUpdateCache[key] = cache
		creditOperationGrantUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q creditOperationGrantQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for credit_operation_grants")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for credit_operation_grants")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o CreditOperationGrantSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), creditOperationGrantPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"credit_tracker\".\"credit_operation_grants\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, creditOperationGrantPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in creditOperationGrant slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all creditOperationGrant")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *CreditOperationGrant) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("models: no credit_operation_grants provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(creditOperationGrantColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	creditOperationGrantUpsertCacheMut.RLock()
	cache, cached := creditOperationGrantUpsertCache[key]
	creditOperationGrantUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			creditOperationGrantAllColumns,
			creditOperationGrantColumnsWithDefault,
			creditOperationGrantColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			creditOperationGrantAllColumns,
			creditOperationGrantPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert credit_operation_grants, could not build update column list")
		}

		ret := strmangle.SetComplement(creditOperationGrantAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(creditOperationGrantPrimaryKeyColumns) == 0 {
				return errors.New("models: unable to upsert credit_operation_grants, could not build conflict column list")
			}

			conflict = make([]string, len(creditOperationGrantPrimaryKeyColumns))
			copy(conflict, creditOperationGrantPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"credit_tracker\".\"credit_operation_grants\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(creditOperationGrantType, creditOperationGrantMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(creditOperationGrantType, creditOperationGrantMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert credit_operation_grants")
	}

	if !cached {
		creditOperationGrantUpsertCacheMut.Lock()
		creditOperationGrantUpsertCache[key] = cache
		creditOperationGrantUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single CreditOperationGrant record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *CreditOperationGrant) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no CreditOperationGrant provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), creditOperationGrantPrimaryKeyMapping)
	sql := "DELETE FROM \"credit_tracker\".\"credit_operation_grants\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from credit_operation_grants")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for credit_operation_grants")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q creditOperationGrantQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no creditOperationGrantQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from credit_operation_grants")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for credit_operation_grants")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o CreditOperationGrantSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(creditOperationGrantBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), creditOperationGrantPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"credit_tracker\".\"credit_operation_grants\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, creditOperationGrantPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from creditOperationGrant slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for credit_operation_grants")
	}

	if len(creditOperationGrantAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *CreditOperationGrant) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindCreditOperationGrant(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *CreditOperationGrantSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := CreditOperationGrantSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), creditOperationGrantPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"credit_tracker\".\"credit_operation_grants\".* FROM \"credit_tracker\".\"credit_operation_grants\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, creditOperationGrantPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in CreditOperationGrantSlice")
	}

	*o = slice

	return nil
}

// CreditOperationGrantExists checks if the CreditOperationGrant row exists.
func CreditOperationGrantExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"credit_tracker\".\"credit_operation_grants\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if credit_operation_grants exists")
	}

	return exists, nil
}

// Exists checks if the CreditOperationGrant row exists.
func (o *CreditOperationGrant) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return CreditOperationGrantExists(ctx, exec, o.ID)
}
