// Code generated by SQLBoiler 4.19.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// CreditGrant is an object representing the database table.
type CreditGrant struct {
	// Blockchain transaction hash (0x...)
	TXHash string `boil:"tx_hash" json:"tx_hash" toml:"tx_hash" yaml:"tx_hash"`
	// Event log index within the transaction
	LogIndex int `boil:"log_index" json:"log_index" toml:"log_index" yaml:"log_index"`
	// License identifier: Ethereum address or string ID
	LicenseID string `boil:"license_id" json:"license_id" toml:"license_id" yaml:"license_id"`
	// DID string identifying the physical asset/device
	AssetDid string `boil:"asset_did" json:"asset_did" toml:"asset_did" yaml:"asset_did"`
	// Original credit amount granted from a burn (never changes)
	InitialAmount int64 `boil:"initial_amount" json:"initial_amount" toml:"initial_amount" yaml:"initial_amount"`
	// Current unused credits (changes based on usage)
	RemainingAmount int64 `boil:"remaining_amount" json:"remaining_amount" toml:"remaining_amount" yaml:"remaining_amount"`
	// When these credits become unusable
	ExpiresAt time.Time `boil:"expires_at" json:"expires_at" toml:"expires_at" yaml:"expires_at"`
	// Blockchain block number (for verification and ordering)
	BlockNumber null.Int64 `boil:"block_number" json:"block_number,omitempty" toml:"block_number" yaml:"block_number,omitempty"`
	// Transaction state: pending, confirmed, or failed
	Status string `boil:"status" json:"status" toml:"status" yaml:"status"`
	// When this record was created in our system
	CreatedAt null.Time `boil:"created_at" json:"created_at,omitempty" toml:"created_at" yaml:"created_at,omitempty"`
	// Last modification (status changes, remaining_amount updates)
	UpdatedAt null.Time `boil:"updated_at" json:"updated_at,omitempty" toml:"updated_at" yaml:"updated_at,omitempty"`

	R *creditGrantR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L creditGrantL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var CreditGrantColumns = struct {
	TXHash          string
	LogIndex        string
	LicenseID       string
	AssetDid        string
	InitialAmount   string
	RemainingAmount string
	ExpiresAt       string
	BlockNumber     string
	Status          string
	CreatedAt       string
	UpdatedAt       string
}{
	TXHash:          "tx_hash",
	LogIndex:        "log_index",
	LicenseID:       "license_id",
	AssetDid:        "asset_did",
	InitialAmount:   "initial_amount",
	RemainingAmount: "remaining_amount",
	ExpiresAt:       "expires_at",
	BlockNumber:     "block_number",
	Status:          "status",
	CreatedAt:       "created_at",
	UpdatedAt:       "updated_at",
}

var CreditGrantTableColumns = struct {
	TXHash          string
	LogIndex        string
	LicenseID       string
	AssetDid        string
	InitialAmount   string
	RemainingAmount string
	ExpiresAt       string
	BlockNumber     string
	Status          string
	CreatedAt       string
	UpdatedAt       string
}{
	TXHash:          "credit_grants.tx_hash",
	LogIndex:        "credit_grants.log_index",
	LicenseID:       "credit_grants.license_id",
	AssetDid:        "credit_grants.asset_did",
	InitialAmount:   "credit_grants.initial_amount",
	RemainingAmount: "credit_grants.remaining_amount",
	ExpiresAt:       "credit_grants.expires_at",
	BlockNumber:     "credit_grants.block_number",
	Status:          "credit_grants.status",
	CreatedAt:       "credit_grants.created_at",
	UpdatedAt:       "credit_grants.updated_at",
}

// Generated where

type whereHelperstring struct{ field string }

func (w whereHelperstring) EQ(x string) qm.QueryMod      { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperstring) NEQ(x string) qm.QueryMod     { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperstring) LT(x string) qm.QueryMod      { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperstring) LTE(x string) qm.QueryMod     { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperstring) GT(x string) qm.QueryMod      { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperstring) GTE(x string) qm.QueryMod     { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperstring) LIKE(x string) qm.QueryMod    { return qm.Where(w.field+" LIKE ?", x) }
func (w whereHelperstring) NLIKE(x string) qm.QueryMod   { return qm.Where(w.field+" NOT LIKE ?", x) }
func (w whereHelperstring) ILIKE(x string) qm.QueryMod   { return qm.Where(w.field+" ILIKE ?", x) }
func (w whereHelperstring) NILIKE(x string) qm.QueryMod  { return qm.Where(w.field+" NOT ILIKE ?", x) }
func (w whereHelperstring) SIMILAR(x string) qm.QueryMod { return qm.Where(w.field+" SIMILAR TO ?", x) }
func (w whereHelperstring) NSIMILAR(x string) qm.QueryMod {
	return qm.Where(w.field+" NOT SIMILAR TO ?", x)
}
func (w whereHelperstring) IN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperstring) NIN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

type whereHelperint struct{ field string }

func (w whereHelperint) EQ(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperint) NEQ(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperint) LT(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperint) LTE(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperint) GT(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperint) GTE(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperint) IN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperint) NIN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

type whereHelperint64 struct{ field string }

func (w whereHelperint64) EQ(x int64) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperint64) NEQ(x int64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperint64) LT(x int64) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperint64) LTE(x int64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperint64) GT(x int64) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperint64) GTE(x int64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperint64) IN(slice []int64) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperint64) NIN(slice []int64) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

type whereHelpertime_Time struct{ field string }

func (w whereHelpertime_Time) EQ(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.EQ, x)
}
func (w whereHelpertime_Time) NEQ(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelpertime_Time) LT(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpertime_Time) LTE(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpertime_Time) GT(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpertime_Time) GTE(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

type whereHelpernull_Int64 struct{ field string }

func (w whereHelpernull_Int64) EQ(x null.Int64) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Int64) NEQ(x null.Int64) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Int64) LT(x null.Int64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Int64) LTE(x null.Int64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Int64) GT(x null.Int64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Int64) GTE(x null.Int64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}
func (w whereHelpernull_Int64) IN(slice []int64) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelpernull_Int64) NIN(slice []int64) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

func (w whereHelpernull_Int64) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Int64) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

type whereHelpernull_Time struct{ field string }

func (w whereHelpernull_Time) EQ(x null.Time) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Time) NEQ(x null.Time) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Time) LT(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Time) LTE(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Time) GT(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Time) GTE(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

func (w whereHelpernull_Time) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Time) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

var CreditGrantWhere = struct {
	TXHash          whereHelperstring
	LogIndex        whereHelperint
	LicenseID       whereHelperstring
	AssetDid        whereHelperstring
	InitialAmount   whereHelperint64
	RemainingAmount whereHelperint64
	ExpiresAt       whereHelpertime_Time
	BlockNumber     whereHelpernull_Int64
	Status          whereHelperstring
	CreatedAt       whereHelpernull_Time
	UpdatedAt       whereHelpernull_Time
}{
	TXHash:          whereHelperstring{field: "\"credit_tracker\".\"credit_grants\".\"tx_hash\""},
	LogIndex:        whereHelperint{field: "\"credit_tracker\".\"credit_grants\".\"log_index\""},
	LicenseID:       whereHelperstring{field: "\"credit_tracker\".\"credit_grants\".\"license_id\""},
	AssetDid:        whereHelperstring{field: "\"credit_tracker\".\"credit_grants\".\"asset_did\""},
	InitialAmount:   whereHelperint64{field: "\"credit_tracker\".\"credit_grants\".\"initial_amount\""},
	RemainingAmount: whereHelperint64{field: "\"credit_tracker\".\"credit_grants\".\"remaining_amount\""},
	ExpiresAt:       whereHelpertime_Time{field: "\"credit_tracker\".\"credit_grants\".\"expires_at\""},
	BlockNumber:     whereHelpernull_Int64{field: "\"credit_tracker\".\"credit_grants\".\"block_number\""},
	Status:          whereHelperstring{field: "\"credit_tracker\".\"credit_grants\".\"status\""},
	CreatedAt:       whereHelpernull_Time{field: "\"credit_tracker\".\"credit_grants\".\"created_at\""},
	UpdatedAt:       whereHelpernull_Time{field: "\"credit_tracker\".\"credit_grants\".\"updated_at\""},
}

// CreditGrantRels is where relationship names are stored.
var CreditGrantRels = struct {
}{}

// creditGrantR is where relationships are stored.
type creditGrantR struct {
}

// NewStruct creates a new relationship struct
func (*creditGrantR) NewStruct() *creditGrantR {
	return &creditGrantR{}
}

// creditGrantL is where Load methods for each relationship are stored.
type creditGrantL struct{}

var (
	creditGrantAllColumns            = []string{"tx_hash", "log_index", "license_id", "asset_did", "initial_amount", "remaining_amount", "expires_at", "block_number", "status", "created_at", "updated_at"}
	creditGrantColumnsWithoutDefault = []string{"tx_hash", "log_index", "license_id", "asset_did", "initial_amount", "remaining_amount", "expires_at"}
	creditGrantColumnsWithDefault    = []string{"block_number", "status", "created_at", "updated_at"}
	creditGrantPrimaryKeyColumns     = []string{"tx_hash", "log_index"}
	creditGrantGeneratedColumns      = []string{}
)

type (
	// CreditGrantSlice is an alias for a slice of pointers to CreditGrant.
	// This should almost always be used instead of []CreditGrant.
	CreditGrantSlice []*CreditGrant
	// CreditGrantHook is the signature for custom CreditGrant hook methods
	CreditGrantHook func(context.Context, boil.ContextExecutor, *CreditGrant) error

	creditGrantQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	creditGrantType                 = reflect.TypeOf(&CreditGrant{})
	creditGrantMapping              = queries.MakeStructMapping(creditGrantType)
	creditGrantPrimaryKeyMapping, _ = queries.BindMapping(creditGrantType, creditGrantMapping, creditGrantPrimaryKeyColumns)
	creditGrantInsertCacheMut       sync.RWMutex
	creditGrantInsertCache          = make(map[string]insertCache)
	creditGrantUpdateCacheMut       sync.RWMutex
	creditGrantUpdateCache          = make(map[string]updateCache)
	creditGrantUpsertCacheMut       sync.RWMutex
	creditGrantUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var creditGrantAfterSelectMu sync.Mutex
var creditGrantAfterSelectHooks []CreditGrantHook

var creditGrantBeforeInsertMu sync.Mutex
var creditGrantBeforeInsertHooks []CreditGrantHook
var creditGrantAfterInsertMu sync.Mutex
var creditGrantAfterInsertHooks []CreditGrantHook

var creditGrantBeforeUpdateMu sync.Mutex
var creditGrantBeforeUpdateHooks []CreditGrantHook
var creditGrantAfterUpdateMu sync.Mutex
var creditGrantAfterUpdateHooks []CreditGrantHook

var creditGrantBeforeDeleteMu sync.Mutex
var creditGrantBeforeDeleteHooks []CreditGrantHook
var creditGrantAfterDeleteMu sync.Mutex
var creditGrantAfterDeleteHooks []CreditGrantHook

var creditGrantBeforeUpsertMu sync.Mutex
var creditGrantBeforeUpsertHooks []CreditGrantHook
var creditGrantAfterUpsertMu sync.Mutex
var creditGrantAfterUpsertHooks []CreditGrantHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *CreditGrant) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range creditGrantAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *CreditGrant) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range creditGrantBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *CreditGrant) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range creditGrantAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *CreditGrant) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range creditGrantBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *CreditGrant) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range creditGrantAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *CreditGrant) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range creditGrantBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *CreditGrant) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range creditGrantAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *CreditGrant) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range creditGrantBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *CreditGrant) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range creditGrantAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddCreditGrantHook registers your hook function for all future operations.
func AddCreditGrantHook(hookPoint boil.HookPoint, creditGrantHook CreditGrantHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		creditGrantAfterSelectMu.Lock()
		creditGrantAfterSelectHooks = append(creditGrantAfterSelectHooks, creditGrantHook)
		creditGrantAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		creditGrantBeforeInsertMu.Lock()
		creditGrantBeforeInsertHooks = append(creditGrantBeforeInsertHooks, creditGrantHook)
		creditGrantBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		creditGrantAfterInsertMu.Lock()
		creditGrantAfterInsertHooks = append(creditGrantAfterInsertHooks, creditGrantHook)
		creditGrantAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		creditGrantBeforeUpdateMu.Lock()
		creditGrantBeforeUpdateHooks = append(creditGrantBeforeUpdateHooks, creditGrantHook)
		creditGrantBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		creditGrantAfterUpdateMu.Lock()
		creditGrantAfterUpdateHooks = append(creditGrantAfterUpdateHooks, creditGrantHook)
		creditGrantAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		creditGrantBeforeDeleteMu.Lock()
		creditGrantBeforeDeleteHooks = append(creditGrantBeforeDeleteHooks, creditGrantHook)
		creditGrantBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		creditGrantAfterDeleteMu.Lock()
		creditGrantAfterDeleteHooks = append(creditGrantAfterDeleteHooks, creditGrantHook)
		creditGrantAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		creditGrantBeforeUpsertMu.Lock()
		creditGrantBeforeUpsertHooks = append(creditGrantBeforeUpsertHooks, creditGrantHook)
		creditGrantBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		creditGrantAfterUpsertMu.Lock()
		creditGrantAfterUpsertHooks = append(creditGrantAfterUpsertHooks, creditGrantHook)
		creditGrantAfterUpsertMu.Unlock()
	}
}

// One returns a single creditGrant record from the query.
func (q creditGrantQuery) One(ctx context.Context, exec boil.ContextExecutor) (*CreditGrant, error) {
	o := &CreditGrant{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for credit_grants")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all CreditGrant records from the query.
func (q creditGrantQuery) All(ctx context.Context, exec boil.ContextExecutor) (CreditGrantSlice, error) {
	var o []*CreditGrant

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to CreditGrant slice")
	}

	if len(creditGrantAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all CreditGrant records in the query.
func (q creditGrantQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count credit_grants rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q creditGrantQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if credit_grants exists")
	}

	return count > 0, nil
}

// CreditGrants retrieves all the records using an executor.
func CreditGrants(mods ...qm.QueryMod) creditGrantQuery {
	mods = append(mods, qm.From("\"credit_tracker\".\"credit_grants\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"credit_tracker\".\"credit_grants\".*"})
	}

	return creditGrantQuery{q}
}

// FindCreditGrant retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindCreditGrant(ctx context.Context, exec boil.ContextExecutor, tXHash string, logIndex int, selectCols ...string) (*CreditGrant, error) {
	creditGrantObj := &CreditGrant{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"credit_tracker\".\"credit_grants\" where \"tx_hash\"=$1 AND \"log_index\"=$2", sel,
	)

	q := queries.Raw(query, tXHash, logIndex)

	err := q.Bind(ctx, exec, creditGrantObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from credit_grants")
	}

	if err = creditGrantObj.doAfterSelectHooks(ctx, exec); err != nil {
		return creditGrantObj, err
	}

	return creditGrantObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *CreditGrant) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no credit_grants provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
		if queries.MustTime(o.UpdatedAt).IsZero() {
			queries.SetScanner(&o.UpdatedAt, currTime)
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(creditGrantColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	creditGrantInsertCacheMut.RLock()
	cache, cached := creditGrantInsertCache[key]
	creditGrantInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			creditGrantAllColumns,
			creditGrantColumnsWithDefault,
			creditGrantColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(creditGrantType, creditGrantMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(creditGrantType, creditGrantMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"credit_tracker\".\"credit_grants\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"credit_tracker\".\"credit_grants\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into credit_grants")
	}

	if !cached {
		creditGrantInsertCacheMut.Lock()
		creditGrantInsertCache[key] = cache
		creditGrantInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the CreditGrant.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *CreditGrant) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	creditGrantUpdateCacheMut.RLock()
	cache, cached := creditGrantUpdateCache[key]
	creditGrantUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			creditGrantAllColumns,
			creditGrantPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update credit_grants, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"credit_tracker\".\"credit_grants\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, creditGrantPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(creditGrantType, creditGrantMapping, append(wl, creditGrantPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update credit_grants row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for credit_grants")
	}

	if !cached {
		creditGrantUpdateCacheMut.Lock()
		creditGrantUpdateCache[key] = cache
		creditGrantUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q creditGrantQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for credit_grants")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for credit_grants")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o CreditGrantSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), creditGrantPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"credit_tracker\".\"credit_grants\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, creditGrantPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in creditGrant slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all creditGrant")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *CreditGrant) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("models: no credit_grants provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(creditGrantColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	creditGrantUpsertCacheMut.RLock()
	cache, cached := creditGrantUpsertCache[key]
	creditGrantUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			creditGrantAllColumns,
			creditGrantColumnsWithDefault,
			creditGrantColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			creditGrantAllColumns,
			creditGrantPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert credit_grants, could not build update column list")
		}

		ret := strmangle.SetComplement(creditGrantAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(creditGrantPrimaryKeyColumns) == 0 {
				return errors.New("models: unable to upsert credit_grants, could not build conflict column list")
			}

			conflict = make([]string, len(creditGrantPrimaryKeyColumns))
			copy(conflict, creditGrantPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"credit_tracker\".\"credit_grants\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(creditGrantType, creditGrantMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(creditGrantType, creditGrantMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert credit_grants")
	}

	if !cached {
		creditGrantUpsertCacheMut.Lock()
		creditGrantUpsertCache[key] = cache
		creditGrantUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single CreditGrant record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *CreditGrant) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no CreditGrant provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), creditGrantPrimaryKeyMapping)
	sql := "DELETE FROM \"credit_tracker\".\"credit_grants\" WHERE \"tx_hash\"=$1 AND \"log_index\"=$2"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from credit_grants")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for credit_grants")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q creditGrantQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no creditGrantQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from credit_grants")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for credit_grants")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o CreditGrantSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(creditGrantBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), creditGrantPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"credit_tracker\".\"credit_grants\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, creditGrantPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from creditGrant slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for credit_grants")
	}

	if len(creditGrantAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *CreditGrant) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindCreditGrant(ctx, exec, o.TXHash, o.LogIndex)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *CreditGrantSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := CreditGrantSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), creditGrantPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"credit_tracker\".\"credit_grants\".* FROM \"credit_tracker\".\"credit_grants\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, creditGrantPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in CreditGrantSlice")
	}

	*o = slice

	return nil
}

// CreditGrantExists checks if the CreditGrant row exists.
func CreditGrantExists(ctx context.Context, exec boil.ContextExecutor, tXHash string, logIndex int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"credit_tracker\".\"credit_grants\" where \"tx_hash\"=$1 AND \"log_index\"=$2 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, tXHash, logIndex)
	}
	row := exec.QueryRowContext(ctx, sql, tXHash, logIndex)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if credit_grants exists")
	}

	return exists, nil
}

// Exists checks if the CreditGrant row exists.
func (o *CreditGrant) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return CreditGrantExists(ctx, exec, o.TXHash, o.LogIndex)
}
