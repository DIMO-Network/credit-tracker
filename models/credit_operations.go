// Code generated by SQLBoiler 4.19.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// CreditOperation is an object representing the database table.
type CreditOperation struct {
	// Unique operation identifier
	ID string `boil:"id" json:"id" toml:"id" yaml:"id"`
	// License that used the credits
	LicenseID string `boil:"license_id" json:"license_id" toml:"license_id" yaml:"license_id"`
	// Asset that was accessed
	AssetDid string `boil:"asset_did" json:"asset_did" toml:"asset_did" yaml:"asset_did"`
	// Type: deduction (deducts credits), refund (returns credits), grant_purchase (new grant), debt_settlement (settles previous debt)
	OperationType string `boil:"operation_type" json:"operation_type" toml:"operation_type" yaml:"operation_type"`
	// Total credits affected (negative for debit, positive for credit)
	TotalAmount int64 `boil:"total_amount" json:"total_amount" toml:"total_amount" yaml:"total_amount"`
	// Total balance for this license/asset after operation
	BalanceAfter int64 `boil:"balance_after" json:"balance_after" toml:"balance_after" yaml:"balance_after"`
	// Which API was called (e.g., telemetry, location)
	APIEndpoint null.String `boil:"api_endpoint" json:"api_endpoint,omitempty" toml:"api_endpoint" yaml:"api_endpoint,omitempty"`
	// External reference (API request ID, order ID, etc.)
	ReferenceID null.String `boil:"reference_id" json:"reference_id,omitempty" toml:"reference_id" yaml:"reference_id,omitempty"`
	// When this operation occurred
	CreatedAt null.Time `boil:"created_at" json:"created_at,omitempty" toml:"created_at" yaml:"created_at,omitempty"`

	R *creditOperationR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L creditOperationL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var CreditOperationColumns = struct {
	ID            string
	LicenseID     string
	AssetDid      string
	OperationType string
	TotalAmount   string
	BalanceAfter  string
	APIEndpoint   string
	ReferenceID   string
	CreatedAt     string
}{
	ID:            "id",
	LicenseID:     "license_id",
	AssetDid:      "asset_did",
	OperationType: "operation_type",
	TotalAmount:   "total_amount",
	BalanceAfter:  "balance_after",
	APIEndpoint:   "api_endpoint",
	ReferenceID:   "reference_id",
	CreatedAt:     "created_at",
}

var CreditOperationTableColumns = struct {
	ID            string
	LicenseID     string
	AssetDid      string
	OperationType string
	TotalAmount   string
	BalanceAfter  string
	APIEndpoint   string
	ReferenceID   string
	CreatedAt     string
}{
	ID:            "credit_operations.id",
	LicenseID:     "credit_operations.license_id",
	AssetDid:      "credit_operations.asset_did",
	OperationType: "credit_operations.operation_type",
	TotalAmount:   "credit_operations.total_amount",
	BalanceAfter:  "credit_operations.balance_after",
	APIEndpoint:   "credit_operations.api_endpoint",
	ReferenceID:   "credit_operations.reference_id",
	CreatedAt:     "credit_operations.created_at",
}

// Generated where

type whereHelpernull_String struct{ field string }

func (w whereHelpernull_String) EQ(x null.String) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_String) NEQ(x null.String) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_String) LT(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_String) LTE(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_String) GT(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_String) GTE(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}
func (w whereHelpernull_String) LIKE(x null.String) qm.QueryMod {
	return qm.Where(w.field+" LIKE ?", x)
}
func (w whereHelpernull_String) NLIKE(x null.String) qm.QueryMod {
	return qm.Where(w.field+" NOT LIKE ?", x)
}
func (w whereHelpernull_String) ILIKE(x null.String) qm.QueryMod {
	return qm.Where(w.field+" ILIKE ?", x)
}
func (w whereHelpernull_String) NILIKE(x null.String) qm.QueryMod {
	return qm.Where(w.field+" NOT ILIKE ?", x)
}
func (w whereHelpernull_String) SIMILAR(x null.String) qm.QueryMod {
	return qm.Where(w.field+" SIMILAR TO ?", x)
}
func (w whereHelpernull_String) NSIMILAR(x null.String) qm.QueryMod {
	return qm.Where(w.field+" NOT SIMILAR TO ?", x)
}
func (w whereHelpernull_String) IN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelpernull_String) NIN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

func (w whereHelpernull_String) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_String) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

var CreditOperationWhere = struct {
	ID            whereHelperstring
	LicenseID     whereHelperstring
	AssetDid      whereHelperstring
	OperationType whereHelperstring
	TotalAmount   whereHelperint64
	BalanceAfter  whereHelperint64
	APIEndpoint   whereHelpernull_String
	ReferenceID   whereHelpernull_String
	CreatedAt     whereHelpernull_Time
}{
	ID:            whereHelperstring{field: "\"credit_tracker\".\"credit_operations\".\"id\""},
	LicenseID:     whereHelperstring{field: "\"credit_tracker\".\"credit_operations\".\"license_id\""},
	AssetDid:      whereHelperstring{field: "\"credit_tracker\".\"credit_operations\".\"asset_did\""},
	OperationType: whereHelperstring{field: "\"credit_tracker\".\"credit_operations\".\"operation_type\""},
	TotalAmount:   whereHelperint64{field: "\"credit_tracker\".\"credit_operations\".\"total_amount\""},
	BalanceAfter:  whereHelperint64{field: "\"credit_tracker\".\"credit_operations\".\"balance_after\""},
	APIEndpoint:   whereHelpernull_String{field: "\"credit_tracker\".\"credit_operations\".\"api_endpoint\""},
	ReferenceID:   whereHelpernull_String{field: "\"credit_tracker\".\"credit_operations\".\"reference_id\""},
	CreatedAt:     whereHelpernull_Time{field: "\"credit_tracker\".\"credit_operations\".\"created_at\""},
}

// CreditOperationRels is where relationship names are stored.
var CreditOperationRels = struct {
	OperationCreditOperationGrants string
}{
	OperationCreditOperationGrants: "OperationCreditOperationGrants",
}

// creditOperationR is where relationships are stored.
type creditOperationR struct {
	OperationCreditOperationGrants CreditOperationGrantSlice `boil:"OperationCreditOperationGrants" json:"OperationCreditOperationGrants" toml:"OperationCreditOperationGrants" yaml:"OperationCreditOperationGrants"`
}

// NewStruct creates a new relationship struct
func (*creditOperationR) NewStruct() *creditOperationR {
	return &creditOperationR{}
}

func (o *CreditOperation) GetOperationCreditOperationGrants() CreditOperationGrantSlice {
	if o == nil {
		return nil
	}

	return o.R.GetOperationCreditOperationGrants()
}

func (r *creditOperationR) GetOperationCreditOperationGrants() CreditOperationGrantSlice {
	if r == nil {
		return nil
	}

	return r.OperationCreditOperationGrants
}

// creditOperationL is where Load methods for each relationship are stored.
type creditOperationL struct{}

var (
	creditOperationAllColumns            = []string{"id", "license_id", "asset_did", "operation_type", "total_amount", "balance_after", "api_endpoint", "reference_id", "created_at"}
	creditOperationColumnsWithoutDefault = []string{"license_id", "asset_did", "operation_type", "total_amount", "balance_after"}
	creditOperationColumnsWithDefault    = []string{"id", "api_endpoint", "reference_id", "created_at"}
	creditOperationPrimaryKeyColumns     = []string{"id"}
	creditOperationGeneratedColumns      = []string{}
)

type (
	// CreditOperationSlice is an alias for a slice of pointers to CreditOperation.
	// This should almost always be used instead of []CreditOperation.
	CreditOperationSlice []*CreditOperation
	// CreditOperationHook is the signature for custom CreditOperation hook methods
	CreditOperationHook func(context.Context, boil.ContextExecutor, *CreditOperation) error

	creditOperationQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	creditOperationType                 = reflect.TypeOf(&CreditOperation{})
	creditOperationMapping              = queries.MakeStructMapping(creditOperationType)
	creditOperationPrimaryKeyMapping, _ = queries.BindMapping(creditOperationType, creditOperationMapping, creditOperationPrimaryKeyColumns)
	creditOperationInsertCacheMut       sync.RWMutex
	creditOperationInsertCache          = make(map[string]insertCache)
	creditOperationUpdateCacheMut       sync.RWMutex
	creditOperationUpdateCache          = make(map[string]updateCache)
	creditOperationUpsertCacheMut       sync.RWMutex
	creditOperationUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var creditOperationAfterSelectMu sync.Mutex
var creditOperationAfterSelectHooks []CreditOperationHook

var creditOperationBeforeInsertMu sync.Mutex
var creditOperationBeforeInsertHooks []CreditOperationHook
var creditOperationAfterInsertMu sync.Mutex
var creditOperationAfterInsertHooks []CreditOperationHook

var creditOperationBeforeUpdateMu sync.Mutex
var creditOperationBeforeUpdateHooks []CreditOperationHook
var creditOperationAfterUpdateMu sync.Mutex
var creditOperationAfterUpdateHooks []CreditOperationHook

var creditOperationBeforeDeleteMu sync.Mutex
var creditOperationBeforeDeleteHooks []CreditOperationHook
var creditOperationAfterDeleteMu sync.Mutex
var creditOperationAfterDeleteHooks []CreditOperationHook

var creditOperationBeforeUpsertMu sync.Mutex
var creditOperationBeforeUpsertHooks []CreditOperationHook
var creditOperationAfterUpsertMu sync.Mutex
var creditOperationAfterUpsertHooks []CreditOperationHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *CreditOperation) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range creditOperationAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *CreditOperation) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range creditOperationBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *CreditOperation) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range creditOperationAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *CreditOperation) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range creditOperationBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *CreditOperation) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range creditOperationAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *CreditOperation) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range creditOperationBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *CreditOperation) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range creditOperationAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *CreditOperation) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range creditOperationBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *CreditOperation) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range creditOperationAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddCreditOperationHook registers your hook function for all future operations.
func AddCreditOperationHook(hookPoint boil.HookPoint, creditOperationHook CreditOperationHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		creditOperationAfterSelectMu.Lock()
		creditOperationAfterSelectHooks = append(creditOperationAfterSelectHooks, creditOperationHook)
		creditOperationAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		creditOperationBeforeInsertMu.Lock()
		creditOperationBeforeInsertHooks = append(creditOperationBeforeInsertHooks, creditOperationHook)
		creditOperationBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		creditOperationAfterInsertMu.Lock()
		creditOperationAfterInsertHooks = append(creditOperationAfterInsertHooks, creditOperationHook)
		creditOperationAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		creditOperationBeforeUpdateMu.Lock()
		creditOperationBeforeUpdateHooks = append(creditOperationBeforeUpdateHooks, creditOperationHook)
		creditOperationBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		creditOperationAfterUpdateMu.Lock()
		creditOperationAfterUpdateHooks = append(creditOperationAfterUpdateHooks, creditOperationHook)
		creditOperationAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		creditOperationBeforeDeleteMu.Lock()
		creditOperationBeforeDeleteHooks = append(creditOperationBeforeDeleteHooks, creditOperationHook)
		creditOperationBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		creditOperationAfterDeleteMu.Lock()
		creditOperationAfterDeleteHooks = append(creditOperationAfterDeleteHooks, creditOperationHook)
		creditOperationAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		creditOperationBeforeUpsertMu.Lock()
		creditOperationBeforeUpsertHooks = append(creditOperationBeforeUpsertHooks, creditOperationHook)
		creditOperationBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		creditOperationAfterUpsertMu.Lock()
		creditOperationAfterUpsertHooks = append(creditOperationAfterUpsertHooks, creditOperationHook)
		creditOperationAfterUpsertMu.Unlock()
	}
}

// One returns a single creditOperation record from the query.
func (q creditOperationQuery) One(ctx context.Context, exec boil.ContextExecutor) (*CreditOperation, error) {
	o := &CreditOperation{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for credit_operations")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all CreditOperation records from the query.
func (q creditOperationQuery) All(ctx context.Context, exec boil.ContextExecutor) (CreditOperationSlice, error) {
	var o []*CreditOperation

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to CreditOperation slice")
	}

	if len(creditOperationAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all CreditOperation records in the query.
func (q creditOperationQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count credit_operations rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q creditOperationQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if credit_operations exists")
	}

	return count > 0, nil
}

// OperationCreditOperationGrants retrieves all the credit_operation_grant's CreditOperationGrants with an executor via operation_id column.
func (o *CreditOperation) OperationCreditOperationGrants(mods ...qm.QueryMod) creditOperationGrantQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"credit_tracker\".\"credit_operation_grants\".\"operation_id\"=?", o.ID),
	)

	return CreditOperationGrants(queryMods...)
}

// LoadOperationCreditOperationGrants allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (creditOperationL) LoadOperationCreditOperationGrants(ctx context.Context, e boil.ContextExecutor, singular bool, maybeCreditOperation interface{}, mods queries.Applicator) error {
	var slice []*CreditOperation
	var object *CreditOperation

	if singular {
		var ok bool
		object, ok = maybeCreditOperation.(*CreditOperation)
		if !ok {
			object = new(CreditOperation)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeCreditOperation)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeCreditOperation))
			}
		}
	} else {
		s, ok := maybeCreditOperation.(*[]*CreditOperation)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeCreditOperation)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeCreditOperation))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &creditOperationR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &creditOperationR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`credit_tracker.credit_operation_grants`),
		qm.WhereIn(`credit_tracker.credit_operation_grants.operation_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load credit_operation_grants")
	}

	var resultSlice []*CreditOperationGrant
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice credit_operation_grants")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on credit_operation_grants")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for credit_operation_grants")
	}

	if len(creditOperationGrantAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.OperationCreditOperationGrants = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &creditOperationGrantR{}
			}
			foreign.R.Operation = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.OperationID {
				local.R.OperationCreditOperationGrants = append(local.R.OperationCreditOperationGrants, foreign)
				if foreign.R == nil {
					foreign.R = &creditOperationGrantR{}
				}
				foreign.R.Operation = local
				break
			}
		}
	}

	return nil
}

// AddOperationCreditOperationGrants adds the given related objects to the existing relationships
// of the credit_operation, optionally inserting them as new records.
// Appends related to o.R.OperationCreditOperationGrants.
// Sets related.R.Operation appropriately.
func (o *CreditOperation) AddOperationCreditOperationGrants(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*CreditOperationGrant) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.OperationID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"credit_tracker\".\"credit_operation_grants\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"operation_id"}),
				strmangle.WhereClause("\"", "\"", 2, creditOperationGrantPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.OperationID = o.ID
		}
	}

	if o.R == nil {
		o.R = &creditOperationR{
			OperationCreditOperationGrants: related,
		}
	} else {
		o.R.OperationCreditOperationGrants = append(o.R.OperationCreditOperationGrants, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &creditOperationGrantR{
				Operation: o,
			}
		} else {
			rel.R.Operation = o
		}
	}
	return nil
}

// CreditOperations retrieves all the records using an executor.
func CreditOperations(mods ...qm.QueryMod) creditOperationQuery {
	mods = append(mods, qm.From("\"credit_tracker\".\"credit_operations\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"credit_tracker\".\"credit_operations\".*"})
	}

	return creditOperationQuery{q}
}

// FindCreditOperation retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindCreditOperation(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*CreditOperation, error) {
	creditOperationObj := &CreditOperation{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"credit_tracker\".\"credit_operations\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, creditOperationObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from credit_operations")
	}

	if err = creditOperationObj.doAfterSelectHooks(ctx, exec); err != nil {
		return creditOperationObj, err
	}

	return creditOperationObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *CreditOperation) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no credit_operations provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(creditOperationColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	creditOperationInsertCacheMut.RLock()
	cache, cached := creditOperationInsertCache[key]
	creditOperationInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			creditOperationAllColumns,
			creditOperationColumnsWithDefault,
			creditOperationColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(creditOperationType, creditOperationMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(creditOperationType, creditOperationMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"credit_tracker\".\"credit_operations\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"credit_tracker\".\"credit_operations\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into credit_operations")
	}

	if !cached {
		creditOperationInsertCacheMut.Lock()
		creditOperationInsertCache[key] = cache
		creditOperationInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the CreditOperation.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *CreditOperation) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	creditOperationUpdateCacheMut.RLock()
	cache, cached := creditOperationUpdateCache[key]
	creditOperationUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			creditOperationAllColumns,
			creditOperationPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update credit_operations, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"credit_tracker\".\"credit_operations\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, creditOperationPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(creditOperationType, creditOperationMapping, append(wl, creditOperationPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update credit_operations row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for credit_operations")
	}

	if !cached {
		creditOperationUpdateCacheMut.Lock()
		creditOperationUpdateCache[key] = cache
		creditOperationUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q creditOperationQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for credit_operations")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for credit_operations")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o CreditOperationSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), creditOperationPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"credit_tracker\".\"credit_operations\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, creditOperationPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in creditOperation slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all creditOperation")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *CreditOperation) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("models: no credit_operations provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(creditOperationColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	creditOperationUpsertCacheMut.RLock()
	cache, cached := creditOperationUpsertCache[key]
	creditOperationUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			creditOperationAllColumns,
			creditOperationColumnsWithDefault,
			creditOperationColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			creditOperationAllColumns,
			creditOperationPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert credit_operations, could not build update column list")
		}

		ret := strmangle.SetComplement(creditOperationAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(creditOperationPrimaryKeyColumns) == 0 {
				return errors.New("models: unable to upsert credit_operations, could not build conflict column list")
			}

			conflict = make([]string, len(creditOperationPrimaryKeyColumns))
			copy(conflict, creditOperationPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"credit_tracker\".\"credit_operations\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(creditOperationType, creditOperationMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(creditOperationType, creditOperationMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert credit_operations")
	}

	if !cached {
		creditOperationUpsertCacheMut.Lock()
		creditOperationUpsertCache[key] = cache
		creditOperationUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single CreditOperation record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *CreditOperation) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no CreditOperation provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), creditOperationPrimaryKeyMapping)
	sql := "DELETE FROM \"credit_tracker\".\"credit_operations\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from credit_operations")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for credit_operations")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q creditOperationQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no creditOperationQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from credit_operations")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for credit_operations")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o CreditOperationSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(creditOperationBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), creditOperationPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"credit_tracker\".\"credit_operations\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, creditOperationPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from creditOperation slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for credit_operations")
	}

	if len(creditOperationAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *CreditOperation) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindCreditOperation(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *CreditOperationSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := CreditOperationSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), creditOperationPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"credit_tracker\".\"credit_operations\".* FROM \"credit_tracker\".\"credit_operations\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, creditOperationPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in CreditOperationSlice")
	}

	*o = slice

	return nil
}

// CreditOperationExists checks if the CreditOperation row exists.
func CreditOperationExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"credit_tracker\".\"credit_operations\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if credit_operations exists")
	}

	return exists, nil
}

// Exists checks if the CreditOperation row exists.
func (o *CreditOperation) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return CreditOperationExists(ctx, exec, o.ID)
}
